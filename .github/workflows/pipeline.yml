name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'

jobs:
  unit-tests:
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - name: Install dependencies
      run: npm install
    - name: Fix Jest permissions
      run: chmod +x ./node_modules/.bin/jest || true
    - name: Run unit tests
      run: npm test

  linting:
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - name: Install ESLint
      run: npm install eslint --save-dev
    - name: Fix ESLint permissions
      run: chmod +x ./node_modules/.bin/eslint || true  
    - name: Run linting
      run: npx eslint .

  build:
    if: github.ref != 'refs/heads/main'
    needs: [unit-tests, linting]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Build Docker image
      run: docker build -t my-app:${{ github.sha }} .
    - name: Save Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: .

  staging-deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: staging
    steps:
    - uses: actions/checkout@v3
    - name: Deploy to staging
      run: echo "Deploying to staging..."
    - name: Wait for approval
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ secrets.GITHUB_TOKEN }}
        approvers: s27122
        instruction: "Czy wdrożenie wygląda dobrze?"

  production-deploy:
    if: github.ref == 'refs/heads/main'
    needs: staging-deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
    - uses: actions/checkout@v3
    - name: Login to Docker Hub
      run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
    - name: Push to Docker Hub
      run: |
        docker tag my-app:${{ github.sha }} my-docker-repo/my-app:latest
        docker push my-docker-repo/my-app:latest

  final-report:
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Generate report
      run: |
        echo "Pipeline result: ${{ job.status }}" > report.txt
    - name: Upload report
      uses: actions/upload-artifact@v4
      with:
        name: final-report
        path: report.txt
